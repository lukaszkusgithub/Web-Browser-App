package com.example.web_browser.fragment

import android.content.Intent
import com.example.web_browser.`interface`.OnDayNightStateChanged
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.app.AppCompatDelegate
import androidx.recyclerview.widget.GridLayoutManager
import com.example.web_browser.model.Bookmark
import com.example.web_browser.adapter.BookmarkAdapter
import com.example.web_browser.activity.MainActivity
import com.example.web_browser.R
import com.example.web_browser.activity.BookmarkActivity
import com.example.web_browser.databinding.FragmentHomeBinding
import com.google.android.material.snackbar.Snackbar

class HomeFragment : Fragment(), OnDayNightStateChanged {
    // Declaration of the binding variable as a late-initialized property
    private lateinit var binding: FragmentHomeBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflating the view from the XML file
        val view = inflater.inflate(R.layout.fragment_home, container, false)
        // Binding the variable 'binding' with the FragmentHomeBinding generated by Android
        binding = FragmentHomeBinding.bind(view)
        // Returning the view
        return view
    }

    override fun onResume() {
        super.onResume()

        // Get a reference to the MainActivity object
        val mainActivityRef = requireActivity() as MainActivity

        // Clear the text in searchViewHome and bottomSearchBar
        mainActivityRef.binding.bottomSearchBar.setText("")
        binding.searchViewHome.setQuery("", false)

        // Set web icon to search icon
        mainActivityRef.binding.webIcon.setImageResource(R.drawable.ic_search)

        // Set a listener for searchViewHome and check for internet connection,
        // change the tab based on the result
        binding.searchViewHome.setOnQueryTextListener(object :
            android.widget.SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String?): Boolean {
                if (mainActivityRef.checkForInternetConnection(requireContext()))
                    mainActivityRef.changeTab(query!!, BrowseFragment(query))
                else
                    Snackbar.make(binding.root, "Check your connection", 3000).show()
                return true
            }

            override fun onQueryTextChange(newText: String?): Boolean = false
        })

        // Set a listener for the goButton in bottomSearchBar and check for internet connection,
        // change the tab based on the result
        mainActivityRef.binding.goButton.setOnClickListener {
            if (mainActivityRef.checkForInternetConnection(requireContext()))
                mainActivityRef.changeTab(
                    mainActivityRef.binding.bottomSearchBar.text.toString(),
                    BrowseFragment(mainActivityRef.binding.bottomSearchBar.text.toString())
                )
            else
                Snackbar.make(binding.root, "Check your connection", 3000).show()
        }


        // Set the RecyclerView to have a fixed size, improving performance
        binding.recyclerView.setHasFixedSize(true)
        // Set the item view cache size to 5, improving performance by caching more items in memory
        binding.recyclerView.setItemViewCacheSize(5)
        // Set the layout manager to a GridLayoutManager with 5 columns
        binding.recyclerView.layoutManager = GridLayoutManager(requireContext(), 5)
        // Set the adapter of the RecyclerView to a new instance of the BookmarkAdapter, passing in the context
        binding.recyclerView.adapter = BookmarkAdapter(requireContext())

        // Hide show all bookmarks Button if size of bookmarks < 1
        if (MainActivity.bookmarkList.size < 1) {
            binding.viewAllBookmarksButton.visibility = View.GONE
        }

        binding.viewAllBookmarksButton.setOnClickListener {
            startActivity(Intent(requireContext(), BookmarkActivity::class.java))
        }

    }

    // NIGHT & LIGHT mode when changing UI config
    override fun onDayNightApplied() {
        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
    }


}